/*

   ICR - I Ching Rings
   by fde-capu

   Please refer to the `README.md` for further info.

   ---

   Copyright 2020 fde-capu
   This is authorial and original work. If you find it profitable or useful in any form, you are not allowed to use it without my authorization; just reach out to me to settle things up, of course I would like to know. If you are here out of intellectual interest, feel free to comment and contribute.

 */

var tic = 0;

// ref = "000000"; // 0000001000011000101000111001001011001101001111010101110110111111'00000 (       99:17      )
// ref = "000001"; // 0000010000110001010001110010010110011010011110101011101101111110'00000 (      104:21      )
// ref = "000010"; // 0000100001100010100011100100101100110100111101010111011011111100'00001 (      115:17      )
// ref = "000011"; // 0000111111000010001100010111101110011101001101100100101011010100'00001 (      101:34      )
// ref = "000100"; // 0001000101000011000111001001011001101001111010101110110111111000'00010 (      120:17      )
// ref = "000101"; // 0001010100010000110101101100011101001011100100110011110111111000'00010 (      104:30      )
// ref = "000110"; // 0001100011100001000101100110110100111100100101011101111110101000'00011 (      124:16      )
// ref = "000111"; // 0001111110001100001000101111011100111010011011001001010110101000'00011 (      103:19      )
 ref = "001000"; // 0010001001010000101100011001101001110000001111010101110110111111'00100 (      809:110     )
// ref = "001001"; // 0010010001010011001011000110100001110011110101011101101111110000'00100 (      119:19      )
// ref = "001010"; // 0010101001011010111010001001101100100001100011100111101111110000'00101 (      100:27      )
// ref = "001011"; // 0010110110010101110111101010010011010001000011000111001111110000'00101 (      100:24      )
// ref = "001100"; // 0011001101100011100100111100001000101101001010111011111101010000'00110 (      123:18      )
// ref = "001101"; // 0011011010110011000111011100101111010011111100001010100010010000'00110 (      646:70      )
// ref = "001110"; // 0011100111100011001001101110110000100010111111010010101101010000'00111 (      351:42      )
// ref = "001111"; // 0011111100111000110010011011110110000100010111010010101101010000'00111 (       99:28      )
// ref = "010000"; // 0100000010001010010011000011010101100101110001110110111100111111'01000 (       90:12      )
// ref = "010001"; // 0100010000101001001100011010101100101110000001110110111100111111'01000 (      616:87      )
// ref = "010010"; // 0100100110010100010000101100011010101110011101101111000000111111'01001 (      115:18      )
// ref = "010011"; // 0100110011100100101000110101011000100001111000000101110110111111'01001 (      225:31      )
// ref = "010100"; // 0101001010110100010111011001001101111001110001100001000000111111'01010 (      117:20      )
// ref = "010101"; // 0101010010110101110100010011011001000011000111001111011111100000'01010 (      112:31      )
// ref = "010110"; // 0101101100101110111101010010011010001000011000111001111110000001'01011 (      131:18      )
// ref = "010111"; // 0101111110111010110110010101001001111001101000100001110001100000'01011 (       89:30      )
// ref = "011000"; // 0110000001100110110100001000111000101110111100100111111010100101'01100 (      113:14      )
// ref = "011001"; // 0110011000110110100111001001011101111000011111101010001000000101'01100 (      214:30      )
// ref = "011010"; // 0110101011011001100011101001111011100101000101111110000100100000'01101 (      218:30      )
// ref = "011011"; // 0110110101100110001110111001011110100111111000010101000100100000'01101 (      756:98      )
// ref = "011100"; // 0111001110111100011111101001100100101100001101101010001000000101'01110 (  1226801:134553  )
// ref = "011101"; // 0111011100111101011111100011011010011001011000010101000100100000'01110 (  1180856:140195  )
// ref = "011110"; // 0111101111110011101011100011011010011001011000010101000100100000'01111 (278483150:32236473*)
// ref = "011111"; // 0111111011110011101011100011011010011001011000010101000100100000'01111 (       89:13      )
// ref = "100000"; // 1000000100001100010100011100100101100110100111101010111011011111'10000 (       89:15      )
// ref = "100001"; // 1000010000001100010100011100100101100110100111101010111011011111'10000 (278483150:32236473)
// ref = "100010"; // 1000100011000010100000011100100101100110100111101010111011011111'10001 (  1180856:143815  )
// ref = "100011"; // 1000110001000011100000010110011011010011110010010101110111111010'10001 (  1226801:134443  )
// ref = "100100"; // 1001001010011001110001000110100001011000000111101010111011011111'10010 (      756:109     )
// ref = "100101"; // 1001010100100110011100010110000100011010111010000001111011011111'10010 (      218:39      )
// ref = "100110"; // 1001100111001001011000110110100010000111100000010101110111111010'10011 (      214:32      )
// ref = "100111"; // 1001111110011001001011110111000111010001000011011000000101011010'10011 (      113:14      )
// ref = "101000"; // 1010000001000101001001101010110110000110010111011110001110011111'10100 (       89:16      )
// ref = "101001"; // 1010010011010001000010101101100101110111100111000110000001111110'10100 (      131:17      )
// ref = "101010"; // 1010101101001010001011101100100110111100111000110000100000011111'10101 (      112:18      )
// ref = "101011"; // 1010110101001011101000100110110010000110001110011110111111000000'10101 (      117:18      )
// ref = "101100"; // 1011001100011011010111001010100111011110000111111010001001000000'10110 (      225:52      )
// ref = "101101"; // 1011011001101011101111010011100101010001100010010000111111000000'10110 (      115:15      )
// ref = "101110"; // 1011101111010110110011100101010011010001111110001001000011000000'10111 (      616:78      )
// ref = "101111"; // 1011111101110101101100111100101010011010001110001001000011000000'10111 (       90:17      )
// ref = "110000"; // 1100000011000111001101100100001001111011101000101101010010101111'11000 (       99:26      )
// ref = "110001"; // 1100011000011100110110010001001111011101000000101101010010101111'11000 (      351:56      )
// ref = "110010"; // 1100100101001100111000100011010000101100000011110101011101101111'11001 (      646:97      )
// ref = "110011"; // 1100110010011100011011000011110111010010110101000100000010101111'11001 (      123:16      )
// ref = "110100"; // 1101001001101010001000010101101100101110111100111000110000001111'11010 (      100:16      )
// ref = "110101"; // 1101010110100101000101110110010011011110011100011000010000001111'11010 (      100:25      )
// ref = "110110"; // 1101101110101100110100111001011110001100001010100010010000001111'11011 (      119:23      )
// ref = "110111"; // 1101110110101111010011100110010110001111110000101010001001000000'11011 (      809:112     )
// ref = "111000"; // 1110000001110011110111010000100011000101100100110110101001010111'11100 (      103:26      )
// ref = "111001"; // 1110011100011110111010011001001011000011011010100010000001010111'11100 (      124:16      )
// ref = "111010"; // 1110101011101111001010010011100010110100011011001100001000000111'11101 (      104:14      )
// ref = "111011"; // 1110111010111100111000110110100110010110000101010001001000000111'11101 (      120:24      )
// ref = "111100"; // 1111000000111101110011101000010001100010110010011011010100101011'11110 (      101:15      )
// ref = "111101"; // 1111011110011101011100011011010011001011000010101000100100000011'11110 (      115:19      )
// ref = "111110"; // 1111101111001110101110001101101001100101100001010100010010000001'11111 (      104:19      )
// ref = "111111"; // 1111110111100111010111000110110100110010110000101010001001000000'11111 (       99:21      )

outtxt					= document.createElement("div");
outtxt.className		= "outtxt";
trackertxt				= document.createElement("div");
trackertxt.className	= "trackertxt";

document.body.appendChild(outtxt);
document.body.appendChild(trackertxt);

	i			= 0;
	sol = trk	= "";
	nxtisi		= false;
var	start		= new Date().getTime();
var end			= false;
var count		= 0;
var maxpile		= 20;

thinktic = setInterval(function()
{
//	while (1 == 1)
//	{
		if (i == 69)
		{
			if (!end)
			{
				end = new Date().getTime();
				time = end - start;
				outtxt.innerHTML = sol + " (" + count + ":" + time + ")";
				//trackertxt.innerHTML = trk;
				clearInterval(thinktic);
				//break;
			}
		}
		if (i < 69)
		{
			putt = bestfit(ref, sol);
			iputt = inverse(putt);
			lastfive = sol.substring(sol.length - 5, sol.length);
			exist = checkexist(lastfive + putt, sol);
			print(sol);
			if (nxtisi) exist = true;
			nxtisi = false;
			if (!exist)
			{
				sol += putt;
				trk += "0";
			}
			if (exist)
			{
				exist = checkexist(lastfive + iputt, sol);
				if (!exist)
				{
					sol += iputt;
					trk += "1";
				}
				if (exist)
				{
					while(
						trk.substring(
							trk.length - 1
							) == "1"
					)
					{
						sol = sol.substring(0, sol.length - 1);
						trk = trk.substring(0, trk.length - 1);
						i--;
					}
					sol = sol.substring(0, sol.length - 1);
					trk = trk.substring(0, trk.length - 1);
					nxtisi = true;
					i--;
					i--;
				}
			}
			i++;
			count++;
			if (count % 10 == 0)
			{
				//outtxt.innerHTML=sol;
				//trackertxt.innerHTML=trk;	
			}
		}
//	}
}, tic);

function bestfit(A, B)
{
	bfok = false;
	bf = 2;
	is = 0;
	il = A.length - 1;
	errpile = 0;

	while(!bfok)
	{
		At = A.substring(is, is + il);
		bft = At.length;
		re = new RegExp(At.substring(0, bft) + "$", "g");
		if (B.match(re))
		{
			bf = A.substring(is + il, is + il + 1);
			bfok = true;
		}
		if (il + is == A.length - 1)
		{
			il--;
			is=0;
		}
		else
		{
			is++;
		}
		if (errpile > maxpile)
		{
			bfok=true;
		}
		errpile++;
	}
	return bf;
}

function checkexist(A, B)
{
	if (B.match(A)) return true;
	return false;
}

function inverse(abit)
{
	if (abit=="0") return "1";
	return "0";
}

function print(str)
{
	outtxt.innerHTML = str;
//	window.scrollTo(0,99999);
}
